name: Auto Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  auto-release:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create module archive
        run: zip -r ./module.zip module.json README.md LICENSE styles/ templates/ lang/ dist/ icons/

      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Extract latest changelog entry
        id: changelog
        run: |
          CHANGELOG=$(awk '/^## \[/{if(++n==1) flag=1; else flag=0} flag' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ---

            **Auto-released from PR #${{ github.event.pull_request.number }}**: ${{ github.event.pull_request.title }}
          artifacts: './module.json,./module.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

      - name: Notify FoundryVTT Package Release API
        run: |
          RESPONSE=$(curl -X POST https://foundryvtt.com/_api/packages/release_version/ \
            -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.FOUNDRY_PACKAGE_TOKEN }}" \
            -d '{
              "id": "fvtt-challenge-calculator",
              "dry-run": false,
              "release": {
                "version": "${{ steps.version.outputs.version }}",
                "manifest": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/module.json",
                "notes": "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}",
                "compatibility": {
                  "minimum": "13",
                  "verified": "13"
                }
              }
            }')

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          echo "Response: $BODY"
          echo "HTTP Code: $HTTP_CODE"

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "::error::Failed to notify Foundry API. HTTP $HTTP_CODE: $BODY"
            exit 1
          fi

          echo "Successfully notified Foundry Package API"
